<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
     http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
     http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<context:annotation-config />
    <tx:annotation-driven />
    
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/datasource.properties" />
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/config.properties" />
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/applicationContext.properties" />
		
    <context:component-scan base-package="com.inf.sys">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<bean id="abstractDataSource" abstract="true" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${datasource.driverClass}"/>
		<property name="validationQuery" value="${datasource.validationQuery}"/>
		<property name="maxIdle" value="${datasource.maxIdle}"/>
		<property name="minIdle" value="${datasource.minIdle}"/>
		<property name="maxActive" value="${datasource.maxActive}"/>
		<property name="initialSize" value="${datasource.initialSize}"/>
	</bean>
	
	<!-- 默认数据源-mybatis使用 -->
	<bean id="dataSource" parent="abstractDataSource">
		<property name="url" value="${datasource.url.0}"/>
		<property name="username" value="${datasource.username.0}"/>
		<property name="password" value="${datasource.password.0}"/>
	</bean>
	
	
	<!--事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 定义SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:com/inf/sys/*/mapper/*.xml" />
		<property name="typeAliasesPackage" value="com.inf.sys.*.model" />
	</bean>
	
	<!-- <bean id="sqlSessionTemplate"     class="org.mybatis.spring.SqlSessionTemplate"> 
       <constructor-arg index="0" ref="sqlSessionFactory" /> 
   </bean> -->

	<!-- 扫描Mapper文件，并实施自动注入 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.inf.sys.*.mapper;" />
	</bean>
	

	<bean id="TransactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED,-Exception</prop>
			</props>
		</property>
	</bean>
	
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<value>*Service*</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>TransactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="jdbcTemplate"   class="org.springframework.jdbc.core.JdbcTemplate" abstract="false"
        lazy-init="false" autowire="default" >
        <property name="dataSource">
            <ref bean="dataSource" />
        </property>
    </bean>
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="batchUpdate*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="query*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="call*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="get*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="do*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"/>
			<tx:method name="*" propagation="REQUIRED" timeout="100" isolation="DEFAULT" rollback-for="Exception"  read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
    <aop:config>
		<!-- <aop:pointcut id="smvoids_serviceMethods" expression="execution(* com.inf.base.*.service.impl.*.*(..))" /> -->
		<aop:pointcut id="base_serviceMethods" expression="execution(* com.inf.sys.*.service.impl.*.*(..))" />
		<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="smvoids_serviceMethods" /> -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="base_serviceMethods" />
	</aop:config>
    
    
    <!-- 线程池 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="100" />
		<!-- 队列最大长度 -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="200" />
		<!-- 无线程可用的处理策略 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	
    
</beans>

